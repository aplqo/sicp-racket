(define (check-square a square n)
  (if (and (= square 1)
           (not (or (= a 1) (= a (- n 1)))))
    0
    square))
(define (squaremod a n)
  (check-square a (remainder (square a) n) n))
(define (expmod base e m)
  (cond ((= e 0) 1)
        ((even? e) 
         (squaremod (expmod base (/ e 2) m) 
                    m))
        (else (remainder (* (expmod base (- e 1) m)
                            base)
                         m))))
(define (miller-rabin test n)
  (not (= (expmod test (- n 1) n) 0)))
