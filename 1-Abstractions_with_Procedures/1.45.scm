(define (average a b)
  (/ (+ a b) 2))
(define (average-damp f) 
  (lambda (x) (average x (f x))))

(define tolerance 0.00001) 
(define (fixed-point f first-guess) 
  (define (close-enough? v1 v2) 
    (< (abs (- v1 v2)) tolerance)) 
  (define (try guess) 
    (let ((next (f guess))) 
      (if (close-enough? guess next) 
        next 
        (try next)))) 
  (try first-guess))
(define (log2 x)
  (define (iter expt i)
    (if (< expt x) (iter (* expt 2) (+ i 1)) i))
  (iter 1 0))
(define (root n a)
  (fixed-point
    ((repeated average-damp (log2 n))
     (lambda (x) (/ a (fast-expt x (- n 1)))))
    1.0))
