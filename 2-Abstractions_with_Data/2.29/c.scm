(define (balanced? m)
  (define (check-mobile m)
    (define lb (left-branch m))
    (define rb (right-branch m))
    (define (prod w b)
      (* w (branch-length b)))

    (let ((l (check-branch lb)))
      (if (car l)
        (let ((r (check-branch rb)))
          (if (and (car r)
                   (= (prod (cdr l) lb)
                      (prod (cdr r) rb)))
            (cons #t (+ (cdr l) (cdr r)))
            (cons #f 0)))
        (cons #f 0))))

  (define (check-branch b)
    (let ((s (branch-structure b)))
      (if (is-weight? s)
        (cons #t s)
        (check-mobile s))))
  (car (check-mobile m)))
